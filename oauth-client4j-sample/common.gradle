apply plugin: 'java'
apply plugin: 'eclipse'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

project.ext.groupName = project.name
project.ext.versionId = getDependencyVersionId()
project.ext.jar = "jar/" + project.name + "-" + getDependencyVersionId()

configurations.all {
   resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

afterEvaluate {
      configurations.compile.allDependencies.findAll { it.group == "com.kdweibo" }.each { it.changing=true }
      configurations.compile.allDependencies.findAll { it.group == "com.kingdee" }.each { it.changing=true }
}

repositories {
    mavenCentral()
}

def getDependencyVersionId(){
   def targetFile = file("${rootDir.path}/.git/HEAD")
   def firsLine
   targetFile.withReader {firsLine = it.readLine() } 
   def branchName = firsLine.trim().replaceAll("ref: refs/heads/","")
   def props = new Properties()
   def path = rootDir.path
   new File(path+"/dependencyVersion.properties").withInputStream { 
      stream -> props.load(stream) 
   }
   return props[branchName]
}

dependencies {
   testCompile "junit:junit:4.8.1"
}

project.ext.packageName = (project.name).replace("-",".")

task classesJar(type:Jar,dependsOn:compileJava){
    baseName = "${packageName}" 
    version = "${versionId}"
    if(file("src/main/resources/META-INF/MANIFEST.MF").exists()){
      manifest{
         from "src/main/resources/META-INF/MANIFEST.MF"
      } 
    } 
    from compileJava.destinationDir
    from "src/main/resources"
    from("src/main/java"){
       exclude  "**/*.java"  
    }
    destinationDir = getFile("jar")
}

task sourceJar(type:Jar){
    baseName = "${packageName}"
    version = "${versionId}"
    classifier = 'sources'
    if(file("src/main/resources/META-INF/MANIFEST.MF").exists()){
      manifest{
         from "src/main/resources/META-INF/MANIFEST.MF"
      } 
    }
    from "src/main/java"
    from "src/main/resources"
    destinationDir = getFile("source")
}

task clearJar(type: Delete) { 
    delete "${jar}"
} 

task makeJar(type:org.gradle.api.tasks.bundling.Jar) {
    //指定生成的jar名
    baseName = "${jar}"
    //从哪里打包class文件
    from('build/classes/main/', 'build/resources/main/')
    //打包到jar后的目录结构 
    into('/')
    //去掉不需要打包的目录和文件 
    exclude('test/', 'BuildConfig.class', 'R.class')
    //去掉R$开头的文件 
    exclude{ it.name.startsWith('R$');} 
} 

makeJar.dependsOn(clearJar, build)
 
def getFile(String target){
  def gradleUserHome = gradle.gradleUserHomeDir
  def targetFile =file("${gradleUserHome}/caches/artifacts-23/filestore/${groupName}/${packageName}/${versionId}/${target}").listFiles()?.sort {-it.lastModified() }?.head()
  return targetFile
}

//sourceSets {
//	main {
//		runtimeClasspath = files(output.resourcesDir) + runtimeClasspath
//	}
//	test {        
//		runtimeClasspath = fileTree(output.resourcesDir) + runtimeClasspath
//    }
//	
//}

test { 
    //copy{
    //       from sourceSets.test.output.resourcesDir
    //       into testClassesDir     
    //}
    
    // copy properties file to class dir
    copy{
           from "src/main/java"
           into testClassesDir
           exclude  "**/*.java"       
    }
 	//classpath = project.sourceSets.test.runtimeClasspath + fileTree(sourceSets.test.output.resourcesDir)  
    useTestNG{
        useDefaultListeners = true
    }
}
